plugins {
	id "de.carne.java-tools" version "0.9.1" apply false
	id "com.install4j.gradle" version "8.0.10" apply false
}

apply plugin: "java-library"
apply plugin: "de.carne.java-tools"
apply plugin: "jacoco"
apply plugin: "distribution"
apply plugin: "com.install4j.gradle"
apply plugin: "eclipse"

defaultTasks "classes", "testClasses"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
	main {
		java {
			srcDir "${buildDir}/generated/main/java"
		}
	}
}

javatools {
	generateI18N {
		enabled = true
		keyFilter = "^STR_.*"
		genDir = file("${buildDir}/generated/main/java")
		lineSeparator = "\n"
	}
	githubRelease {
		enabled = true
		releaseAssets = fileTree(".") {
			include("**/certmgr-*.tar.gz")
			include("**/certmgr-*.zip")
			include("**/certmgr_macos_*.dmg")
			include("**/certmgr_windows-x32_*.exe")
			include("**/certmgr_windows-x64_*.exe")
		}
		overwrite = true
		githubToken = project.findProperty('githubToken')
		ignoreDirty = true
	}
}
draftGitHubRelease.dependsOn(":assembleMedia")

repositories {
	mavenCentral()
	maven { url "https://maven.ej-technologies.com/repository/" }
	if(project.version.endsWith("-SNAPSHOT")) {
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	} 
	mavenLocal()
}

dependencies {
	compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	
	implementation(group: "de.carne", name: "java-jfx", version: project.javaJfxVersion)
	implementation(group: "org.bouncycastle", name: "bcpkix-jdk15on", version: project.bouncycastleVersion)

	testImplementation(group: "junit", name: "junit", version: project.junitVersion)
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
		csv.enabled false
	}
}

jar {
	manifest {
		attributes(
			'Automatic-Module-Name': automaticModuleName,
			'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
			'Build-Jdk' : System.properties['java.version'],
			'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
			'X-Compile-Target-JDK': targetCompatibility,
			'X-Compile-Source-JDK': sourceCompatibility,
			'X-Module-Id': project.name,
			'X-Module-Name': "CertMgr",
			'X-Module-Version': project.version,
			'X-Module-DocURL': projectUrl,
			'X-Module-License': projectLicenseUrl
		)
	}
}

task bootJar(type: Jar) {
	appendix = "boot"
	entryCompression = ZipEntryCompression.STORED
	from jar
	from configurations.runtimeClasspath.collect {
		it.name.matches("java-boot-.*.jar") ? zipTree(it) : it
	}
	manifest {
		attributes(
			'Main-Class': "de.carne.boot.Application",
		)
	}
}

distributions {
	main {
		contents {
			from bootJar
		}
	}
}

tasks.withType(Tar){
	compression = Compression.GZIP
	archiveExtension = "tar.gz"
}

install4j {
	installDir = file(project.hasProperty("install4jHome") ? install4jHome : ".")
}

task assembleMedia(type: com.install4j.gradle.Install4jTask, dependsOn: assembleDist) {
	projectFile = file("src/main/install4j/certmgr.install4j")
	variables = [
		i4jProjectName: project.name,
		i4jProjectVersion: version,
		i4jProjectBaseDir: projectDir,
		i4jProjectBuildDir: buildDir,
		i4jProjectSigningDir: file(project.hasProperty("install4jSigningHome") ? install4jSigningHome : ".")
	]
	if(project.hasProperty("install4jSigningPassword")) {
		disableSigning = false
		macKeystorePassword = install4jSigningPassword
	} else {
		disableSigning = true
	}
	quiet = true		
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged {
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						it.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule("0", "javafx/**"))
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					}
				}
			}
		}
	}
}
